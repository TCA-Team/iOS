fastlane_version "2.19.1"

default_platform :ios

before_all do
	if is_ci?
		# ensure_git_status_clean
	end
	sh 'mkdir reports || true'
	sh 'mkdir DerivedData || true'
end

################
# PUBLIC LANES #
################
desc 'Performs the integration into master. It Builds and tests, performs a static code analysis and updates the SonarQube dashboard.'
lane :integration do
	test(code_coverage: true)
	static_analysis
	sonar_update_dashboard
end

desc 'Performs tests and a static code analysis on the PR. Found issues are commented on the PR.'
lane :pull_request_from_upstream do
	test(code_coverage: true)
	static_analysis
	sonar_github_pr_bot
end

desc 'Runs the test suite.'
lane :pull_request_from_fork do
	test(code_coverage: true)
end


########################
# PRIVATE HELPER LANES #
########################
private_lane :test do |options|
	scan_args = {
		scheme: "TCA-CI",
		device: "iPhone 6 (10.2)",
		configuration: "Debug", # Defaults to Release
		code_coverage: options[:code_coverage] ? options[:code_coverage] : false,
		# skip_build: true,  # Should skip debug build before test build? Might break sonar
		derived_data_path: "fastlane/DerivedData",
		output_directory: "fastlane/reports",
		custom_report_file_name: "scan-test.junit"
	}
	scan(scan_args)
end

desc 'Performs a sonar analysis in preview mode and comments on the PR on Github.'
private_lane :sonar_github_pr_bot do
	sonar_github_args = {
		project_configuration_path: "sonar-project.properties", 
		sonar_runner_args:  "-Dsonar.analysis.mode=preview" +
		" -Dsonar.login=$SONAR_LOGIN_TOKEN" +
		" -Dsonar.github.pullRequest=$TRAVIS_PULL_REQUEST" +
		" -Dsonar.github.oauth=$GITHUB_ACCESS_TOKEN" +
		" -Dsonar.github.repository=$TRAVIS_REPO_SLUG",
	}
	sonar(sonar_github_args)
end

desc 'Updates the SonarQube Server dashboard.'
private_lane :sonar_update_dashboard do
	sonar_update_server_args = {
		project_configuration_path: "sonar-project.properties", 
		sonar_runner_args:  " -Dsonar.login=$SONAR_LOGIN_TOKEN"
	}
	sonar(sonar_update_server_args)
end

desc 'Runs test coverage and swiftlint and provides data in a way sonar can use it afterwards.'
private_lane :static_analysis do
	slather_args = {
		proj: "TUM Campus App.xcodeproj",
		scheme: "TCA-CI", 
		cobertura_xml: true, 
		jenkins: true, 
		build_directory: "fastlane/DerivedData", 
		output_directory: "fastlane/reports", 
	}
	swiftlint_args = {
		output_file: "fastlane/reports/swiftlint.txt",
		ignore_exit_status: true
	}
	slather(slather_args)
	# sh("cd .. && lizard ./TUM\ Campus\ App -l swift --xml > fastlane/reports/lizard-report.xml")
	swiftlint(swiftlint_args)
end